Git init - inciar o repositorio
git add "nome do arquivo" - enviar o arquivo para ser monitorado.
git add . - enviar todos os arquivos para serem monitorado(trackados)
git status - mostra o status da pasta com os arquivos que estao sendo rastreados ou nao ou se jà foram commitados.
commitados - arquivos que foram salvos, salva aquivos no repositorio
-m flag para comentar os arquivos que estado sendo salvos(commitados) no repositorio.
git commit "nome do aquivo" -m (flag) salva no repositorio local
git commit - se nao for posto nenhum nome de arquivos ele irà salvar todos.
____________________________________________________________________________________________________________________________
*Comandos passo a passo que o prorio gitHUB da para publicar o repositorio local no gitHUB*

echo "# repositorio_teste" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/devsamuelsilva/repositorio_teste.git(Link do repositorio criado)
git push -u origin main
A linha 17 so precisar fazer uma unica vez apo`s isso apenas o "git push" ja funciona.
____________________________________________________________________________________________________________________________
*Serve para puxar do GITHUB(repositorio na nuvem) para o GIT(repositorio LOCAL)*

…or push an existing repository from the command line
git remote add origin https://github.com/devsamuelsilva/repositorio_teste.git
git branch -M main
git push -u origin main
______________________________________________________________________________________________________________________________

Comando para puxar as atualizacoes do GITHUB

git pull teste
______________________________________________________________________________________________________________________________

Clonando repositorios no guthub

Dentro do terminal navegue ate a pasta que vc deseja colocar o clone do repositorio.
depois e so digitar "git clone URL do repositorio" .(este ponto no final faz com que ele clone os arquivos direto pra dentro da pasta se nao ele irà clonar a pasta completa, ficando uma pasta dentro da outra)

______________________________________________________________________________________________________________________________

Comando para olha o LOG de todos os commit

git log (apos esse comando ser1a exibido uma lista de todos os commits feitos comecando do mais novo)
OBS: ao final sera exibido um END no qual voce nao consegue utilizar o termina. apenas digite Q que o terminal voltarà ao normal.

______________________________________________________________________________________________________________________________

Dando rollback no arquivo apos um erro

git checkout (Retorna a versao que esta no repositorio do gitHUB) sem nada escrito depois

______________________________________________________________________________________________________________________________
 
 Criando uma arquivo no projeto com .giignore

 todos os nomes de pastas(com / antes) e de arquivos nao serao enviados ao gitHUB

 ______________________________________________________________________________________________________________________________

GIT RESET

usando o restore(reset)

pra usar o restire que ira volta o status pro ultimo commit enviando para branch
git reset --hard(forcar) oringin/main(nome da branch que deseja)
______________________________________________________________________________________________________________________________

git branch

exibe as branch do meu projeto, *(informa a branch que estou conectado)

______________________________________________________________________________________________________________________________

GIT BRANCH
g
it branch "nome da branch"(sem aspas)

cria uma nova branch
para deletar uma branch podemos usar a flag -d assim git branch -d "nome da branch"(sem aspas)
______________________________________________________________________________________________________________________________

GIT CHECKOUT

git checkout "nome da branch"(sem aspas)

muda para outra branch

se usar a fralg -b assim git checkout -b "nome da branch que quer criar"(com aspas) - ele ja cria e ja muda para ela.
______________________________________________________________________________________________________________________________

GIT MERGE

Como unir as branch(merge)

git merge "nome da branch para unir com a main"(sem aspas)

"voce tem que estar dentro da main"

OBS: Obrigatorio o comentario aplicando o -m "" apos o comando de git merge nome da branch -m "comentario"

______________________________________________________________________________________________________________________________

GIT STASH

git stash apply (ID sem os parenteses) volta o codigo para a versao que ficou armazenada no stash

git stash list (exibi a lista com todas as stash com o ID da nova pra antiga)

git stash show -p (id da stash) - mostra oque tem dentro daquela stash

o git stash serve para trazer de volta o codigo para a vesao que esta no github. porem as mudancas que foram feitas ficam,
gurdadas dentro da stash, que no caso podem ser recuperdas.


______________________________________________________________________________________________________________________________

GIT TAG

git tag -a (v2.0) -m "Nova funcionalidades da home do sistema." - entre parenteses e onde coloca o numero da versao.

git tag - sem nada depois lista as versoes do codigo

git show (numero da versao) - mostra o as informacoes daquela versao

______________________________________________________________________________________________________________________________

git push origin (numero da tag) - envia somente uma tag/versao pra o github

git push origin --tags - envia todas as tags para o gitHUB

______________________________________________________________________________________________________________________________

gir fecth -a 

busca todas as branch que estao no repositorio do github e compara com as do pc.
mostra as que estao diferentes.



______________________________________________________________________________________________________________________________




______________________________________________________________________________________________________________________________




______________________________________________________________________________________________________________________________




______________________________________________________________________________________________________________________________




______________________________________________________________________________________________________________________________




______________________________________________________________________________________________________________________________